from PIL import Image
import numpy as np
import os

def load_image(image_path):
    """Load an image and convert to numpy array."""
    try:
        img = Image.open(image_path)
        return np.array(img)
    except Exception as e:
        print(f"Error loading image: {e}")
        return None

def save_image(image_array, output_path):
    """Save numpy array as an image."""
    try:
        img = Image.fromarray(image_array)
        img.save(output_path)
        print(f"Image saved to {output_path}")
    except Exception as e:
        print(f"Error saving image: {e}")

def swap_pixels(image_array):
    """Encrypt/decrypt by swapping pixels in a deterministic pattern."""
    height, width, channels = image_array.shape
    result = image_array.copy()
    
    # Swap pixels in a checkerboard pattern
    for y in range(0, height-1, 2):
        for x in range(0, width-1, 2):
            result[y, x], result[y+1, x+1] = result[y+1, x+1], result[y, x]
            result[y, x+1], result[y+1, x] = result[y+1, x], result[y, x+1]
    
    return result

def xor_pixels(image_array, key=42):
    """Encrypt/decrypt by applying XOR operation to each pixel."""
    result = image_array.copy()
    # Apply XOR with key to each pixel value
    result = result ^ key
    return result

def main():
    print("Simple Image Encryption Tool")
    print("1. Swap Pixels Encryption")
    print("2. XOR Pixels Encryption")
    
    choice = input("Choose encryption method (1 or 2): ")
    input_path = input("Enter input image path: ")
    
    if not os.path.exists(input_path):
        print("Input image not found!")
        return
    
    output_path = input("Enter output image path: ")
    
    image_array = load_image(input_path)
    if image_array is None:
        return
    
    if choice == "1":
        result = swap_pixels(image_array)
    elif choice == "2":
        key = int(input("Enter XOR key (0-255): "))
        if 0 <= key <= 255:
            result = xor_pixels(image_array, key)
        else:
            print("Invalid key! Must be between 0 and 255.")
            return
    else:
        print("Invalid choice!")
        return
    
    save_image(result, output_path)
    print("Operation completed!")

if __name__ == "__main__":
    main()
